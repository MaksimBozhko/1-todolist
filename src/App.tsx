import Container from '@mui/material/Container/Container'
import React, { useEffect } from 'react'
import './App.css'
import { ButtonAppBar } from './components/button/ButtonAppBar'
import { Todolists } from './components/todolists/Todolists'
import { ErrorSnackbar } from './components/ErrorSnackBar'
import { Route, Routes } from 'react-router-dom'
import { Login } from './components/login/Login'
import CircularProgress from '@mui/material/CircularProgress'
import Box from '@mui/material/Box'
import { useAppDispatch, useAppSelector } from './common/hooks/hooks-RTK'
import { appThunks } from './common/toolkit/appSlice'

export const App = () => {
	const { isInitialized } = useAppSelector(state => state.app)
	const dispatch = useAppDispatch()
	useEffect(() => {
		dispatch(appThunks.initializeApp())
	}, [])
	if (!isInitialized)
		return (
			<Box
				sx={{ display: 'flex', justifyContent: 'center', marginTop: '500px' }}
			>
				<CircularProgress />
			</Box>
		)
	return (
		<>
			<ButtonAppBar />
			<Container fixed>
				<Routes>
					<Route path='/1-todolist' element={<Todolists />} />
					<Route path='/1-todolist/login' element={<Login />} />
				</Routes>
				<ErrorSnackbar />
			</Container>
		</>
	)
}

// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
//
// // Types
// type LoginFieldsType = {
//     firstName: string
//     email: string
// }
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             firstName: '',
//             email: '',
//         },
//         validate: (values) => {
//             const errors: Partial<LoginFieldsType> = {};
//
//             if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(values.email)) {
//                 errors.email = 'Invalid email address';
//             }
//             return errors
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//         }
//     });
//
//     // –§—É–Ω–∫—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ–±—à—Ç–æ—Ä–º –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ true –≤ JSX
//     const getTrue = () => {
//         return true
//     }
//
//     return (
//         <form onSubmit={formik.handleSubmit}>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'} {...formik.getFieldProps('firstName')}/>
//             </div>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}{...formik.getFieldProps('email')}/>
//                 {getTrue() && <div style={{color: 'red'}}>{formik.errors.email}</div>}
//             </div>
//             <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ó–∞–≥—Ä—É–∑–∏–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫—É –ø–æ–¥ –ø–æ–ª–µ–º email, –Ω–æ –≤—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏.
// // –ò—Å–ø—Ä–∞–≤—å—Ç–µ 46 —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Ç–∞–∫, —á—Ç–æ–±—ã:
// // 1) –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ email –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// // 2) –í–º–µ—Å—Ç–æ ERROR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫ —ç—Ç–æ–º—É –ø–æ–ª—é.
// // 3) –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –ø–æ–ª–µ–º.
// // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {true && <div style={{color: 'red'}}>error.email</div>}

// import React, { useEffect } from 'react'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux';
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
// import axios from 'axios';
//
//
// // Utils
// console.log = () => {
// };
//
// // Api
// const instance = axios.create({
//     baseURL: 'xxx'
// })
//
// const api = {
//     getUsers() {
//         return instance.get('xxx')
//     }
// }
//
//
// // Reducer
// const initState = {
//     isLoading: false,
//     users: [] as any[]
// }
//
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'APP/SET-USERS':
//             /* 1 */
//             return {...state, users: action.users}
//         case 'APP/IS-LOADING':
//             /* 2 */
//             return {...state, isLoading: action.isLoading}
//         default:
//             return state
//     }
// }
//
// // Actions
// const setUsersAC = (users: any[]) => ({type: 'APP/SET-USERS', users} as const)
// const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
// type ActionsType = | ReturnType<typeof setUsersAC> | ReturnType<typeof setLoadingAC>
//
//
// // Thunk
// const getUsersTC = (): AppThunk => (dispatch) => {
//     /* 3 */
//     dispatch(setLoadingAC(true))
//     api.getUsers()
//         .then((res) => {
//             /* 4 */
//             dispatch(setLoadingAC(false))
//             /* 5 */
//             dispatch(setUsersAC(res.data.data))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Loader
// export const Loader = () => {
//     /* 6 */
//     return (
//         <h1>Loading ...</h1>
//     )
// }
//
//
// // Login
// export const Login = () => {
//     /* 7 */
//
//     const users = useAppSelector(state => state.app.users)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//
//     return (
//         <div>
//             {isLoading && <Loader/>}
//             {users.map((u) => <p key={u.id}>{u.email}</p>)}
//             <h1>–í –¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å —Ä—É—á–∫—É, –ª–∏—Å—Ç–∏–∫ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å–ø–æ–∫–æ–π–Ω–æ
//                 —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫-–≤–æ —Ü–∏—Ñ—Ä –∏ —Å–≤–µ—Ä—å—Ç–µ —Å
//                 –ø–æ–¥—Å–∫–∞–∑–∫–æ–π. –£–¥–∞—á–∏ üöÄ
//             </h1>
//         </div>
//     );
// }
//
// // App
// export const App = () => {
//     /* 8 */
//     const dispatch = useAppDispatch()
//
//     useEffect(() => {
//         /* 9 */
//         dispatch(getUsersTC())
//     }, [])
//
//     /* 10 */
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}><BrowserRouter><App/></BrowserRouter></Provider>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ó–∞–¥–∞—á–∞: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤—É—Ç—Å—è —á–∏—Å–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
// // –ü–æ–¥—Å–∫–∞–∑–∫–∞: –±—É–¥–µ—Ç 13 —á–∏—Å–µ–ª.
// // –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1 2 3 4 5 6 7 8 9 10 1 2 3
